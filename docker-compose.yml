services:
  api-gateway:
    healthcheck:
      test: curl --fail http://localhost:8080/health || exit 1
    build:
      dockerfile: ./api-gateway/Dockerfile
      context: ./
    depends_on:
      db-service:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - API_GATEWAY_CONFIG=config/docker.yml
    volumes:
      - ./logs/api-gateway:/app/logs

  db-service:
    build:
      dockerfile: ./db-service/Dockerfile
      context: ./
    depends_on:
      storage:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    ports:
      - "5050:5050"
    environment:
      - DB_SERVICE_CONFIG=config/docker.yml
    volumes:
      - ./logs/db-service:/app/logs

  storage:
    healthcheck:
      test: pg_isready -U postgres -d postgres
    image: postgres:15.4-alpine
    container_name: storage
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"

  migrator:
    build:
      dockerfile: migrations/migrator/Dockerfile
      context: ./
    depends_on:
      storage:
        condition: service_healthy
    entrypoint: ["sql-migrate", "up", "-config", "migrations/migrator/config/dbconfig.yml", "-env=docker"]

  cache:
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
    image: redis:latest
    container_name: cache
    environment:
      REDIS_PASSWORD: redis
    ports:
      - "6379:6379"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CLUSTER_ID: "U5EXbxt5RoOFSo2m57ab9Q"
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 9092"]
    volumes:
      - ./scripts/init_kafka.sh:/init_kafka.sh
    command:
      - sh
      - -c
      - |
        chmod +x /init_kafka.sh
        /init_kafka.sh


  metrics-service:
    container_name: metrics-service
    build:
      dockerfile: ./metrics-service/Dockerfile
      context: ./
    depends_on:
      kafka:
        condition: service_healthy
      prometheus:
        condition: service_started
    ports:
      - "8090:8080"
    environment:
      - METRICS_SERVICE_CONFIG=config/docker.yml

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana
    depends_on:
      prometheus:
        condition: service_started
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=admin"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning:/etc/grafana/provisioning